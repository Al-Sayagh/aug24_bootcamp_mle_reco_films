x-airflow-common: &airflow-common
  networks:
    - app-network 
  build:
    context: .
    dockerfile: Dockerfile-airflow
  image: surprise-airflow:latest
  env_file:
    - .env.docker
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor

    # PostgreSQL (Airflow DB)
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow

    # Redis (Celery broker)
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0

    # Options courantes
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
    AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    AIRFLOW__API__AUTH_BACKEND: "airflow.api.auth.backend.basic_auth"

    # Options e-mail
    AIRFLOW__SMTP__SMTP_HOST: "smtp.gmail.com"
    AIRFLOW__SMTP__SMTP_PORT: 587
    AIRFLOW__SMTP__SMTP_USER: "de.airflow@gmail.com"
    AIRFLOW__SMTP__SMTP_PASSWORD: "cfsrvkongsobheta"
    AIRFLOW__SMTP__SMTP_MAIL_FROM: "de.airflow@gmail.com"

    # Path Python interne
    PYTHONPATH: "/opt/airflow:/opt/airflow/aug24_bootcamp_mle_reco_films"

    # Gestion du log
    GIT_PYTHON_REFRESH: "quiet"

  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    # Monter les data
    - ./metrics:/opt/airflow/metrics
    - ./models:/opt/airflow/models
    - ./data/processed:/opt/airflow/data/processed
    - ./data/raw:/opt/airflow/data/raw
    # Monter l'app
    - ./api:/opt/airflow/api

  # Utilisateur interne
  user: "${AIRFLOW_UID:-501}:${AIRFLOW_GID:-0}"

  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  # -------------------
  # Postgres
  # -------------------
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-airflow}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-airflow}
      POSTGRES_DB: ${POSTGRES_DB:-airflow}
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always
    networks:
      - app-network
  
  # -------------------
  # Redis
  # -------------------
  redis:
    image: redis:latest 
    ports:
      - "6379:6379"  
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always
    networks:
      - app-network 
  
  # -------------------
  # Airflow Init
  # -------------------
  airflow-init:
    <<: *airflow-common
    command: version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: "true"         # pour migrer la DB
      _AIRFLOW_WWW_USER_CREATE: "true"    # créer user web
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}

  # -------------------
  # Airflow Webserver
  # -------------------  
  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  # -------------------
  # Airflow Scheduler
  # -------------------  
  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"',
        ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  # -------------------
  # Airflow Worker
  # -------------------  
  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  # -------------------
  # FastAPI
  # -------------------  
  fastapi:
    env_file:
      - .env.docker
    build:
      context: .
      dockerfile: api/Dockerfile-fastapi
    image: surprise-fastapi
    ports: 
    - 8000:8000
    environment:
      MLFLOW_TRACKING_URI: http://mlflow:8081
      PYTHONPATH: /app
      POSTGRES_USER: ${POSTGRES_USER:-airflow}  # Pour accéder à Postgres si nécessaire
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-airflow}
      POSTGRES_DB: ${POSTGRES_DB:-airflow}
    depends_on:
      airflow-webserver:
        condition: service_healthy
    networks:
      - app-network
    volumes:
      - ./data/processed:/app/data/processed
      - ./data/raw:/app/data/raw
      - ./metrics:/app/metrics
      - ./models:/app/models
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8000/health"]
      interval: 10s
      timeout: 10s
      retries: 3
    restart: always

  # -------------------
  # MLflow
  # -------------------  
  mlflow:
    image: ghcr.io/mlflow/mlflow:latest
    ports:
      - "8081:8081"
    command: mlflow server --host 0.0.0.0 --port 8081 --backend-store-uri ./mlruns --default-artifact-root ./mlartifacts
    volumes:
    - ./mlruns:/mlruns
    - ./mlartifacts:/mlartifacts
    networks:
      - app-network
    restart: always

volumes:
  postgres-db-volume:  

networks:
  app-network:
    driver: bridge